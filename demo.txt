# Define the provider
provider "aws" {
  region     = "us-east-1"
  access_key = "AKIARLTWUV734KZM6Z5E"
  secret_key = "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"
}

# Create a Virtual Network (Custome)
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "MY_VPC"
  }
}

# Create subnet for the VPC
resource "aws_subnet" "my_app_subnet" {
  tags = {
    Name = "App_subnet"
  }
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  depends_on              = [aws_vpc.my_vpc]
}

# Define a routing table
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id
  tags = {
    name = "My_route_table"
  }
}

# Associate subnet to the routing table
resource "aws_route_table_association" "App_Route_Association" {
  subnet_id      = aws_subnet.my_app_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}

# Create an Internet Gateway for servers to be connected to internet
resource "aws_internet_gateway" "my_IG" {
  vpc_id     = aws_vpc.my_vpc.id
  depends_on = [aws_vpc.my_vpc] # creates the Internet gateway after the VPC is created
  tags = {
    Name = "MY_IGW"
  }
}

# Adding a default route in routing table to point to Internet Gateway created
resource "aws_route" "default_route" {
  route_table_id         = aws_route_table.my_route_table.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.my_IG.id
}

# Create a Security Group
resource "aws_security_group" "App_SG" {
  name   = "App_SG"
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create the private key for logging in to the webserver
resource "tls_private_key" "Web-Key" {
  algorithm = "RSA"
}

# Save the public key attributes from the generated private key
resource "aws_key_pair" "App-Instance-Key" {
  key_name   = "Web-Key"
  public_key = tls_private_key.Web-Key.public_key_openssh
}

# Save the private key to our local system
resource "local_file" "Web-Key-Save" {
  content  = tls_private_key.Web-Key.private_key_pem
  filename = "Web_key.pem"
}

# Create a EC2 instance for the webserver
resource "aws_instance" "Web" {
  ami                    = "ami-02b972fec07f1e659"
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.my_app_subnet.id
  key_name               = "Web-Key"
  security_groups = [aws_security_group.App_SG.id]
  tags = {
    Name = "Web Server 1"
  }
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = tls_private_key.Web-Key.private_key_pem
    host        = self.public_ip # IP of the current instance
    timeout = "10m"
  }

  provisioner "remote-exec" {
    # installing httpd server
    inline = [
      "sudo yum install httpd -y",
      "sudo systemctl httpd start"
    ]
    
  }
}

# Create a block volume for data persistence
resource "aws_ebs_volume" "myebs" {
  availability_zone = aws_instance.Web.availability_zone
  size              = 1
  tags = {
    Name = "ebsvol1"
  }
}

# Attch a volume to the instance
resource "aws_volume_attachment" "attach_ebs" {
  depends_on   = [aws_ebs_volume.myebs]
  device_name  = "dev/sdh"
  volume_id    = aws_ebs_volume.myebs.id
  instance_id  = aws_instance.Web.id
  force_detach = true
}

# Mount the volume to the instance
resource "null_resource" "mount" {
  depends_on = [aws_volume_attachment.attach_ebs]
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = tls_private_key.Web-Key.private_key_pem
    host        = aws_instance.Web.public_ip # IP of the current instance
  }
  provisioner "remote-exec" {
    # drive formatting
    inline = [
      "sudo mkfs.ext4 /dev/xvdh",
      "sudo mount /dev/xvdh /var/www/html",
      "sudo rm -rf /var/www/html",
      "sudo git clone https://github.com/basavrajdevpuje/Demo_Page.git /var/www/html"
    ]
  }
}

# Define S3 ID 
# An origin access identity is a special CloudFront user that you can 
# associate with Amazon S3 origins, so that you can secure 
# all or just some of your Amazon S3 content.
locals {
  s3_origin_id = "s3-origin"
}

# Create a S3 bucket to store the static data like image
resource "aws_s3_bucket" "my-s3-bucket" {
  bucket = "test-s3bucket-store-webapp1-raj"
  tags = {
    Name        = "test-s3bucket-store-webapp1-raj"
    Environment = "Test"
  }

  provisioner "local-exec" {
    command = "git clone https://github.com/basavrajdevpuje/Demo_Page.git web-server-image"
  }
}

# resource "aws_s3_bucket_acl" "my-s3-bucket-acl" {
#   bucket = "test-s3bucket-store-webapp1-raj"
#   acl    = "public-read-write"
# }

resource "aws_s3_bucket_versioning" "my-s3-bucket-aws_s3_bucket_versioning" {
  bucket = "test-s3bucket-store-webapp1-raj"
  versioning_configuration {
    status = "Enabled"
  }
}

# Allow public access to the S3 bucket
resource "aws_s3_account_public_access_block" "public_storage" {
  depends_on = [aws_s3_bucket.my-s3-bucket]
  #bucket              = "test-s3bucket-store-webapp1-raj"
  block_public_acls   = true
  block_public_policy = true
}

# Upload data to the S3 bucket
resource "aws_s3_object" "Object1" {
  #depends_on = [aws_s3_bucket.my-s3-bucket]
  bucket     = "test-s3bucket-store-webapp1-raj"
  acl        = "public-read-write"
  key        = "world" # Name of the object once it is in the bucket.
  source     = "web-server-image/world.jpeg"
  #etag = filemd5("web-server-image/world.jpeg")
}


# Create a CloudFront distribution for CDN
resource "aws_cloudfront_distribution" "tera-cloudfront" {
  depends_on = [aws_s3_object.Object1]
  origin {
    # DNS domain name of the S3 bucket
    domain_name = aws_s3_bucket.my-s3-bucket.bucket_regional_domain_name
    origin_id   = local.s3_origin_id
  }
  enabled = true # Whether the distribution is enabled to accept end user requests for content.
  default_cache_behavior {
    allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
    cached_methods   = ["GET", "HEAD"]
    target_origin_id = local.s3_origin_id

    forwarded_values {
      query_string = false

      cookies {
        forward = "none"
      }
    }

    viewer_protocol_policy = "allow-all"
    min_ttl                = 0
    default_ttl            = 3600
    max_ttl                = 86400
  }

  restrictions {
    geo_restriction {
      restriction_type = "none"
    }
  }

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}

# Update the CDN image URL to the webserver code
# URL is accessed via CloudFront using the S3 bucket object
# S3 Bucket Object -> CloudFront

resource "null_resource" "Write_Image" {
  depends_on = [aws_cloudfront_distribution.tera-cloudfront]
  connection {
    type        = "ssh"
    user        = "ec2-user"
    private_key = tls_private_key.Web-Key.private_key_pem
    host        = aws_instance.Web.public_ip # IP of the current instance
  }

  provisioner "remote-exec" {
    inline = [
      "sudo su << EOF",
      "echo \"<img src='http://${aws_cloudfront_distribution.tera-cloudfront.domain_name}/${aws_s3_object.Object1.key}' width='300' height='300'>\" >>/var/www/html/index.html",
      "echo \"</body>\" >>/var/www/html/index.html",
      "echo \"</html>\" >>/var/www/html/index.html",
      "EOF"
    ]
  }
}

#Test the application
resource "null_resource" "running_the_website" {
  depends_on = [null_resource.Write_Image]
  provisioner "local-exec" {
    command = "start chrome ${aws_instance.Web.public_ip}"
  }
}
